package ru.kata.spring.boot_security.demo.service;//package ru.kata.spring.boot_security.demo.service;
//
//import org.hibernate.Hibernate;
//import org.springframework.beans.factory.annotation.Autowired;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UsernameNotFoundException;
//import org.springframework.security.crypto.password.PasswordEncoder;
//import org.springframework.stereotype.Service;
//import org.springframework.transaction.annotation.Transactional;
//import ru.kata.spring.boot_security.demo.model.Role;
//import ru.kata.spring.boot_security.demo.model.User;
//import ru.kata.spring.boot_security.demo.repositories.UserRepository;
//
//import java.util.List;
//
//@Service
//public class UserServiceImpl implements UserService {
//
//    private final UserRepository userRepository;
//    private final RoleService roleService;
//    private final PasswordEncoder passwordEncoder;
//
//
//    @Autowired
//    public UserServiceImpl(UserRepository userRepository, RoleService roleService, PasswordEncoder passwordEncoder) {
//        this.userRepository = userRepository;
//        this.roleService = roleService;
//        this.passwordEncoder = passwordEncoder;
//    }
//
//    @Transactional(readOnly = true)
//    public List<User> findAll() {
//        return userRepository.findAll();
//    }
//
//    @Transactional
//    public void saveUserWithRole(User user) {
//        if (user.getId() == null) {
//            user.setPassword(passwordEncoder.encode(user.getPassword()));
//        }
//
//        List<Role> roles = user.getRoles();
//        for (int i = 0; i < roles.size(); i++) {
//            Role role = roles.get(i);
//            Role existingRole = roleService.findByRoleName(role.getRoleName());
//            if (existingRole == null) {
//                roleService.save(role);
//            } else {
//                roles.set(i, existingRole);
//            }
//        }
//
//        user.setRoles(roles);
//        userRepository.save(user);
//    }
//
//    @Transactional(readOnly = true)
//    public User findById(Long id) {
//        return userRepository.findById(id).orElseThrow(() ->
//                new UsernameNotFoundException("User not found"));
//    }
//
//    @Transactional
//    public void delete(Long id) {
//        userRepository.deleteById(id);
//    }
//
//
//    @Override
//    @Transactional(readOnly = true)
//    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
//        User user = userRepository.findByUsername(username)
//                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
//        Hibernate.initialize(user.getRoles());
//        return user;
//    }
//
//    @Override
//    public List<User> getUsers() {
//        return List.of();
//    }
//
//    @Override
//    public User getUserById(int id) {
//        return null;
//    }
//
//    @Override
//    public void saveUser(User user) {
//
//    }
//
//    @Override
//    public void deleteUserById(int id) {
//
//    }
//
//    @Override
//    public User findByUsername(String username) {
//        return null;
//    }
//}


import org.springframework.context.annotation.Lazy;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.kata.spring.boot_security.demo.model.Role;
import ru.kata.spring.boot_security.demo.model.User;
import ru.kata.spring.boot_security.demo.repositories.RoleRepository;
import ru.kata.spring.boot_security.demo.repositories.UserRepository;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

@Transactional(readOnly = true)
@Service
public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final RoleRepository roleRepository;

    public UserServiceImpl(UserRepository userRepository, @Lazy PasswordEncoder passwordEncoder, RoleRepository roleRepository) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
        this.roleRepository = roleRepository;
    }

    @Override
    public List<User> getUsers() {
        return userRepository.findAllWithRoles();
    }

    @Override
    public User getUserById(int id) {
        return userRepository.findByIdWithRoles(id)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }


    @Override
    @Transactional
    public void saveUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        Set<Role> roles = new HashSet<>();
        for (Role role : user.getRoles()) {
            Role existingRole = roleRepository.findById(role.getId())
                    .orElseThrow(() -> new RuntimeException("Role not found with id: " + role.getId()));
            roles.add(existingRole);
        }
        user.setRoles((List<Role>) roles);

        userRepository.save(user);
    }

    @Override
    public void deleteUserById(int id) {
        
    }

    @Override
    @Transactional
    public void deleteUserById(long id) {
        userRepository.deleteById(id);
    }

    @Override
    public User findByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow (() -> new UsernameNotFoundException("User not found"));
    }

    @Override
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        return null;
    }
}


